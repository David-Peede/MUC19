// Valeria Anorve-Garibay
// Neutral & Negative
// SLiM version 3.7.1
// No scaling factor (all parameters are multiplied by 1)

initialize() {
	
	initializeMutationRate(1.3763111111111113e-08*1.0);
	//initializeTreeSeq();
	
	// Mutations
	// m1: non-coding: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// m2: nonsynonymous (slightly deleterious) drawn from a DFE from Kim et al.
	// mean selection coefficient and alpha shape parameter for gamma distribution
	//initializeMutationType("m2", 0.0, "g", -0.01315*1.0, 0.186); // negative 

	// neutral
	initializeMutationType("m3", 0.5, "f", 0.0);
	
	// Genomic elements:
	
	// Exons: use a mixture of syn and nonsyn at a 1:2.31 ratio (Huber et al.)
	initializeGenomicElementType("g1", c(m1), c(1.0));	
	//initializeGenomicElementType("g1", c(m1,m2), c(1.0,2.31)); // negative 
	
	// Neutral: assumed as intergenic (inter exon) regions
	initializeGenomicElementType("g2", c(m3), c(1.0));
	
	// read in exon and recomb info (gencode and decode ranges)
	info_lines = readFile("/Users/valeriaalejandraanorvegaribay/desktop/huertaSanchez-lab/muc19-repo/finalVersion/data/sim_seq_file.txt");
	
	// neutral
	for (line in info_lines[substr(info_lines, 0, 2) == "neu"])
	{
		components = strsplit(line, " ");
		neu_starts = asInteger(components[1]);
		neu_ends = asInteger(components[2]);
		initializeGenomicElement(g2, neu_starts, neu_ends);
	}
	
	//exons
	for (line in info_lines[substr(info_lines, 0, 2) == "exo"])
	{
		components = strsplit(line, " ");
		exon_starts = asInteger(components[1]);
		exon_ends = asInteger(components[2]);
		initializeGenomicElement(g1, exon_starts, exon_ends);
	}
	
	// recombination map
	rec_ends = NULL;
	rec_rates = NULL;
	for (line in info_lines[substr(info_lines, 0, 2) == "rec"])
	{
		components = strsplit(line, " ");
		rec_ends = c(rec_ends, asInteger(components[1]));
		rec_rates = c(rec_rates, asFloat(components[2]));
	}
	
	// multiply rec rates by scaling factor
	initializeRecombinationRate(0.5*(1-(1-2*rec_rates)^1.0), rec_ends);
	
	// uniform recombination rate
	//initializeRecombinationRate(2.5453451830985906e-09*1.0);

}

// Demographic model
// Generation time: 25 years
// Parameters are from Gutenkunst et al. 2009 and Browning et al. 2018

// burn-in: 7300*10 (10N)
// p0: Equilibrium/root population: ancestral
1 early(){
	
	// nrep, save seed id for reference
	defineConstant("simID", c(3147669541202));
	setSeed(c(3147669541202));
	sim.addSubpop("p0", asInteger(round(7300/1.0)));

}

// End of burn-in: 8800 generations ago (220000 y. a.)
// Split DEN and AMH (AFR) from Ancestral
73000 early() {
	
	// p1: Altai Denisovan population (split from Ancestral)
	sim.addSubpopSplit("p1", asInteger(round(5083/1.0)), p0); // DEN
	
	// p2: Anatomically modern humans (split from Ancestral)
	sim.addSubpopSplit("p2", asInteger(round(12300/1.0)), p0); // AFR

}

// Equilibrium/root population extinction
73000 late() {
	
	p0.setSubpopulationSize(0);

}

// 5600 generations ago (140000 y. a.)
// OoA bottleneck: split OoA from Africans and set up migration
76200 early() {
	
	// Out of Africa bottleneck: split from AFR
	sim.addSubpopSplit("p3", asInteger(round(2100/1.0)), p2); // OoA
	
	// AFR <-> OOA migration: 25x10^-5
	// AFR -> OOA
	p2.setMigrationRates(p3, 0.00025);
	// OOA -> AFR
	p3.setMigrationRates(p2, 0.00025);

}

// Europe and Asia split from OoA and DenA Introgression Pulse
// 1056 generations ago (26400 y. a.)
80744 early() {
	
	// Europe split from OoA
	sim.addSubpopSplit("p4", asInteger(round(1500/1.0)), p3);
	
	// East Asia split from OOA
	sim.addSubpopSplit("p5", asInteger(round(590/1.0)), p3);
	
	// Introgression event: DenA to EAS (10%)
	// DenA -> EAS
	p5.setMigrationRates(p1, 0.1);
	
	// No migration between AFR |-| OOA
	// AFR -| OOA
	p2.setMigrationRates(c(p3), c(0.0));
	// OOA -| AFR
	p3.setMigrationRates(c(p2), c(0.0));

}

// OOA extinction
// 1056 generations ago (26400 y. a.)
80744 late () {
	
	// OOA: extinction
	p3.setSubpopulationSize(0);

}

// set DenA -> EAS migration rates to 0, sample 1 DenA individual and DenA extinction
80744 late() {
	
	// DenA sample (1)
	// 26400 y. a.
	p1.outputVCFSample(1, filePath = "/Users/valeriaalejandraanorvegaribay/Desktop/huertaSanchez-lab/muc19-repo/finalVersion/scripts/VCF_DenA_negative" + ".txt"); // DEN
	
	// DenA: extinction
	p5.setMigrationRates(p1, 0.0);
	p1.setSubpopulationSize(0); // 26400 y. a.

}

// Europe and Asia expansion (exponential growth)
// From 1056 generations ago (26400 y. a.) to 0 generations ago (present)
80745: early() {
	
	// Europe exponential growth: 0.23%
	t = sim.generation - 80745;
	p4_size = round(1500 * (1 + 0.0023)^t);
	p4.setSubpopulationSize(asInteger(p4_size));
	
	// East Asia exponential growth: 0.37%
	t = sim.generation - 80745;
	p5_size = round(590 * (1 + 0.0037)^t);
	p5.setSubpopulationSize(asInteger(p5_size));

}

// Migration events
80745 early() {
	
	// AFR -> EUR
	p4.setMigrationRates(p2, 3e-05);
	// EUR -> AFR
	p2.setMigrationRates(p4, 3e-05);
	
	// AFR -> EAS
	p5.setMigrationRates(p2, 1.9e-05);
	// EAS -> AFR
	p2.setMigrationRates(p5, 1.9e-05);
	
	// EUR -> EAS
	p5.setMigrationRates(p4, 0.000135);
	// EAS -> EUR
	p4.setMigrationRates(p5, 0.000135);

}

// America (MXL: TMx based on Gutenkunst et al., 2009) split from East Asia
// 864 generations ago (21600 y. a.)
80936 early() {
	
	// America split from EAS
	sim.addSubpopSplit("p6", asInteger(round(800/1.0)), p5);

}

// America expansion (exponential growth): growth rate: 0.5%
80937: early() {
	
	t = sim.generation - 80937;
	p6_size = round(800 * (1 + 0.005)^t);
	p6.setSubpopulationSize(asInteger(p6_size));

}

// ADMIXTURE EVENT: 12 generations ago (300 y. a.)
81788 early() {
	
	// Admixture from AFR (Browning) and EUR (Gut)
	p6.setMigrationRates(c(p2, p4, p5), c(0.16, 0.33, 0.0));

}

81788 late() {
	// ADMIXTURE
	p6.setMigrationRates(c(p2, p4, p5), c(0.0, 0.0, 0.0));

}

// America expansion (exponential growth) AFTER Admixture
// Growth rate: 0.5%
// 81789: early() {
// 
//    t = sim.generation - 81789;
//     p6_size = round(800 * (1 + 0.05)^t);
//    p6.setSubpopulationSize(asInteger(p6_size));
//    
// }

// pops sampled 0 generations/years ago: AFR, EUR, EAS, MXL
81800 late() {
	
	// AFRICA
	p2.outputVCFSample(108, filePath = "/Users/valeriaalejandraanorvegaribay/Desktop/huertaSanchez-lab/muc19-repo/finalVersion/scripts/VCF_AFR_negative" + ".txt");
	
	// EUROPE
	p4.outputVCFSample(99, filePath = "/Users/valeriaalejandraanorvegaribay/Desktop/huertaSanchez-lab/muc19-repo/finalVersion/scripts/VCF_EUR_negative" + ".txt");
	
	// EAST ASIAN
	p5.outputVCFSample(103, filePath = "/Users/valeriaalejandraanorvegaribay/Desktop/huertaSanchez-lab/muc19-repo/finalVersion/scripts/VCF_EAS_negative" + ".txt");
	
	// MXL
	p6.outputVCFSample(64, filePath = "/Users/valeriaalejandraanorvegaribay/Desktop/huertaSanchez-lab/muc19-repo/finalVersion/scripts/VCF_MXL_negative" + ".txt");
	
	//sim.treeSeqOutput("/Users/valeriaalejandraanorvegaribay/Desktop/huertaSanchez-lab/muc19-repo/finalVersion/scripts/trees_negative" + ".trees");

}
