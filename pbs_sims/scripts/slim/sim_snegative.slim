// Valeria Anorve-Garibay
// Demographic model for MXL by Medina-Munoz et al., 2023
// Neutral & Negative
// SLiM version 3.7.1
// No scaling factor (all parameters are multiplied by 1)

initialize() {
	
	initializeMutationRate(1.3763111111111113e-08*1.0);
	//initializeTreeSeq();
	
	// Mutations
	// m1: non-coding: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// m2: nonsynonymous (slightly deleterious) drawn from a DFE from Kim et al.
	// mean selection coefficient and alpha shape parameter for gamma distribution
	initializeMutationType("m2", 0.0, "g", -0.01315*1.0, 0.186);
	
	// neutral
	initializeMutationType("m3", 0.5, "f", 0.0);
	
	// Genomic elements:
	
	// Exons: use a mixture of syn and nonsyn at a 1:2.31 ratio (Huber et al.)
	initializeGenomicElementType("g1", c(m1,m2), c(1.0,2.31));
	
	// Neutral: assumed as intergenic (inter exon) regions
	initializeGenomicElementType("g2", c(m3), c(1.0));
	
	// read in exon and recomb info (gencode and decode ranges)
	info_lines = readFile("../data/sim_seq_file_MUC19.txt");
	
	// neutral
	for (line in info_lines[substr(info_lines, 0, 2) == "neu"])
	{
		components = strsplit(line, " ");
		neu_starts = asInteger(components[1]);
		neu_ends = asInteger(components[2]);
		initializeGenomicElement(g2, neu_starts, neu_ends);
	}
	
	//exons
	for (line in info_lines[substr(info_lines, 0, 2) == "exo"])
	{
		components = strsplit(line, " ");
		exon_starts = asInteger(components[1]);
		exon_ends = asInteger(components[2]);
		initializeGenomicElement(g1, exon_starts, exon_ends);
	}
	
	// recombination map
	rec_ends = NULL;
	rec_rates = NULL;
	for (line in info_lines[substr(info_lines, 0, 2) == "rec"])
	{
		components = strsplit(line, " ");
		rec_ends = c(rec_ends, asInteger(components[1]));
		rec_rates = c(rec_rates, asFloat(components[2]));
	}
	
	// multiply rec rates by scaling factor
	initializeRecombinationRate(0.5*(1-(1-2*rec_rates)^1.0), rec_ends);
	
	// uniform recombination rate
	//initializeRecombinationRate(2.5453451830985906e-09*1.0); // default  1e-8

}


// Demographic Modeling of Admixed Latin American Populations from Whole Genomes - Mexican admixture
// Modified from Medina-Munoz 2023 to include archaic introgression from Neanderthal and Denisova
// by Valeria Anorve-Garibay and Sofia Vierya-Sanchez
// Generation time: 29 years

// burn-in: 13580*10 (10N)
// p0: Equilibrium/root population: ancestral
1 early(){
	defineConstant("simID", c(5360003290964));
	setSeed(c(5360003290964));
	sim.addSubpop("p0", asInteger(round(13580.373657849503/1.0))); // ANCESTRAL
}
// end of burn-in

// archaic split from ancestral: 20,225 generations ago (586,525 y. a.)
135801 early() {
	// p1: archaic
	sim.addSubpopSplit("p1", asInteger(round(13249/1.0)), p0); // ARCHAIC
}

// Anatomically Modern Human (AMH) split from ancestral: XXX generations ago (XXX y. a.)
139355 early() {
	// AMH: split from Ancestral
	sim.addSubpopSplit("p4", asInteger(round(27142.07281765073/1.0)), p0); // AMH
}

// p0: Equilibrium/root population: ancestral extinction
139355 late() {
	p0.setSubpopulationSize(0);
}

// neanderthal and denisova split: 15,090 generations ago (437610 yago, generation time: 29 years)
// split NEA and DEN from archaic
140936 early() {
	// p2: Neanderthal
	sim.addSubpopSplit("p2", asInteger(round(826/1.0)), p1); // NEA
	
	// p3: Denisova
	sim.addSubpopSplit("p3", asInteger(round(5083/1.0)), p1); // DEN
}

// archaic extinction
140936 late() {
	p1.setSubpopulationSize(0);
}

152980 early() {
	// OOA: split from AMH
	sim.addSubpopSplit("p5", asInteger(round(1834.8116479610317/1.0)), p4); // OoA
	
	// YRI: split from AMH
	sim.addSubpopSplit("p6", asInteger(round(27142.07281765073/1.0)), p4); // OoA
}

152980 late() {
	// AMH: extinction
	p4.setSubpopulationSize(0);
}

// migration events
152981 early() {
	// YRI -> OOA
	p5.setMigrationRates(p6, 0.000158595);
	// OOA -> YRI
	p6.setMigrationRates(p5, 0.000158595);
}

// introgression pulse
153957 early() {
	// NEA -> OOA
	p5.setMigrationRates(p2, 0.025);
}

153957 late() {
	// NEA -| OOA
	p5.setMigrationRates(p2, 0);
}

154262 early() {
	// IBS: split from OOA
	sim.addSubpopSplit("p7", asInteger(round(2761.3347067250797/1.0)), p5); // IBS: EUR
	
	// CHB: split from OOA
	sim.addSubpopSplit("p8", asInteger(round(1954.52946761033/1.0)), p5); // CHB: EAS
}

154262 late() {
	// YRI -| OOA
	p5.setMigrationRates(p6, 0);
	// OOA -| YRI
	p6.setMigrationRates(p5, 0);
	// OOA: extinction
	p5.setSubpopulationSize(0);
}

154263:156026 early() {
	// IBS: exponential growth
	start_size = 2761;
	end_size = 26462;
	r = log(end_size / start_size);
	gx = (sim.generation - self.start + 1) / (self.end - self.start + 1);
	size = asInteger(round(start_size * exp(r * gx)));
	p7.setSubpopulationSize(size);
	
	// CHB: exponential growth
	start_size = 1955;
	end_size = 15364;
	r = log(end_size / start_size);
	gx = (sim.generation - self.start + 1) / (self.end - self.start + 1);
	size = asInteger(round(start_size * exp(r * gx)));
	p8.setSubpopulationSize(size);
}

154263 early() {
	
	// YRI -> IBS
	p7.setMigrationRates(p6, 2.50161e-05);
	// IBS -> YRI
	p6.setMigrationRates(p7, 2.50161e-05);
	// YRI -> CHB
	p8.setMigrationRates(p6, 3.29483e-06);
	// CHB -> YRI
	p6.setMigrationRates(p8, 3.29483e-06);
	// IBS -> CHB
	p8.setMigrationRates(p7, 6.62401e-05);
	// CHB -> IBS
	p7.setMigrationRates(p8, 6.62401e-05);

}

// DEN introgression pulse...
154474 early() {
	// DEN -> CHB
	p8.setMigrationRates(p3, 0.1); // I changed it to 10% to match the previous simis I did
}

154474 late() {
	// DEN -| CHB
	p8.setMigrationRates(p3, 0);
}

154475 late() {
	// NEA: extinction
	p2.setSubpopulationSize(0);
	// DEN: extinction
	p3.setSubpopulationSize(0);
}

154903 early() {
	// MXB: split from CHB
	sim.addSubpopSplit("p9", asInteger(round(1312.8044812722449/1.0)), p8); // MXB: Indigenous Americans in Mexico / 50Genomes from MXB
}

154904:156026 early() {
	// MXB: exponential growth
	start_size = 1313;
	end_size = 38462;
	r = log(end_size / start_size);
	gx = (sim.generation - self.start + 1) / (self.end - self.start + 1);
	size = asInteger(round(start_size * exp(r * gx)));
	p9.setSubpopulationSize(size);
}

156010 early() {
	// MXL: admixture of MXB IBS
	sim.addSubpop("p10", 20000); // MXL
	p10.setMigrationRates(c(p9, p7), c(0.7508, 0.2492));
}

156010 late() {
	// MXL
	p10.setMigrationRates(c(p9, p7), c(0, 0));
}

156011 early() {
	// MXB -> MXL
	p10.setMigrationRates(p9, 0.0502);
	// IBS -> MXL
	p10.setMigrationRates(p7, 0.0573);
}

156013 early() {
	// YRI -> MXL
	p10.setMigrationRates(p6, 0.11178);
	// CHB -> MXL
	p10.setMigrationRates(p8, 0.007422);
}

156013 late() {
	// YRI -| MXL
	p10.setMigrationRates(p6, 0);
	// CHB -| MXL
	p10.setMigrationRates(p8, 0);
}

156024 late() {
	// MXB -| MXL
	p10.setMigrationRates(p9, 0);
	// IBS -| MXL
	p10.setMigrationRates(p7, 0);
}

// pops sampled 0 generations/years ago: EUR, EAS, MXL
156026 late() {
	
	// EUROPE
	p7.outputVCFSample(99, filePath = "/gpfs/data/ehuertas/vgaribay/dave_muc19/scripts/VCF_EUR_snegative_7" + ".txt");
	
	// EAST ASIAN
	p8.outputVCFSample(103, filePath = "/gpfs/data/ehuertas/vgaribay/dave_muc19/scripts/VCF_EAS_snegative_7" + ".txt");
	
	// MXL
	p10.outputVCFSample(64, filePath = "/gpfs/data/ehuertas/vgaribay/dave_muc19/scripts/VCF_MXL_snegative_7" + ".txt");
	
	//sim.treeSeqOutput("/gpfs/data/ehuertas/vgaribay/dave_muc19/scripts/trees_snegative_7" + ".trees");

}
